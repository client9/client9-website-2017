#!/bin/sh
set -e
#  Code generated by godownloader. DO NOT EDIT.

OWNER=spf13
REPO=hugo
BINARY=hugo
FORMAT=tar.gz
BINDIR=${BINDIR:-./bin}

VERSION=$1
if [ -z "${VERSION}" ]; then
echo ""
echo "$0: download go binaries for ${OWNER}/${REPO}"
echo ""
echo "Usage: $0 [version]"
echo "  where [version] is 'latest' or a version number from"
echo "  https://github.com/${OWNER}/${REPO}/releases"
echo ""
echo "Generated by godownloader"
echo " https://github.com/goreleaser/godownloader"
echo ""
exit 1
fi

# portable sha256sum
checksum() {
  TARGET=$1
  if type gsha256sum &> /dev/null; then
    # mac homebrew, others
    gsha256sum $TARGET | cut -d ' ' -f 1
  elif type sha256sum &> /dev/null; then
    # gnu, busybox
    sha256sum $TARGET | cut -d ' ' -f 1
  elif type shasum &> /dev/null; then
    # darwin, freebsd?
    shasum -a 256 $TARGET | cut -d ' ' -f 1
  elif type openssl &> /dev/null; then
    openssl -dst openssl dgst -sha256 $TARGET | cut -d ' ' -f a
  else
    echo "Unable to compute hash. exiting"
    exit 1
  fi
}

verify_checksum() {
  TARGET=$1
  SUMS=$2

  # http://stackoverflow.com/questions/2664740/extract-file-basename-without-path-and-extension-in-bash
  BASENAME=${TARGET##*/}

  # remove tabs:  old version of goreleaser used them
  # https://github.com/goreleaser/goreleaser/issues/233
  # fixed 2017-05-11
  WANT=$(grep ${BASENAME} ${SUMS} | tr '\t' ' ' | cut -d ' ' -f 1)
  GOT=$(checksum $TARGET)
  if [ "$GOT" != "$WANT" ]; then
     echo "Checksum for $TARGET did not verify"
     echo "WANT: ${WANT}"
     echo "GOT : ${GOT}"
     exit 1
  fi
}

mktmpdir() {
   test -z "$TMPDIR" && TMPDIR="$(mktemp -d)"
   mkdir -p ${TMPDIR}
}

untar() {
  TARBALL=$1
  case ${TARBALL} in
  *.tar.gz|*.tgz)
    tar -xzf ${TARBALL}
    ;;
  *.tar)
    tar -xf ${TARBALL}
    ;;
  *.zip)
    unzip ${TARBALL}
    ;;
  *)
    echo "Unknown archive format for ${TARBALL}"
    exit 1
  esac
}

# download dest source
# if dest is "-", then output to stdout
# if source is api.github.com add auth token
download() {
  DEST=$1
  SOURCE=$2

  HEADER=""
  case $SOURCE in
  https://api.github.com*)
     test -z "$GITHUB_TOKEN" || HEADER="Authorization: token $GITHUB_TOKEN"
     ;;
  esac

  if type curl &> /dev/null; then
    WGET="curl --fail -sSL"
    test -z "$GITHUB_TOKEN" || WGET="${WGET} -H \"${HEADER}\""
    if [ "${DEST}" != "-" ]; then
      WGET="$WGET -o $DEST"
    fi
  elif type wget &> /dev/null; then
    WGET="wget -q -O $DEST"
    test -z "$GITHUB_TOKEN" || WGET="${WGET} --header \"${HEADER}\""
  else
    echo "Unable to find wget or curl.  Exit"
    exit 1
  fi

  if [ "${DEST}" != "-" ]; then
    rm -f "${DEST}"
  fi
  ${WGET} ${SOURCE}
}

if [ "${VERSION}" = "latest" ]; then
  echo "Checking GitHub for latest version of ${OWNER}/${REPO}"
  VERSION=$(download - https://api.github.com/repos/${OWNER}/${REPO}/releases/latest | grep -m 1 "\"name\":" | cut -d ":" -f 2 | tr -d ' ",')
  if [ -z "${VERSION}" ]; then
    echo "Unable to determine latest release for ${OWNER}/${REPO}"
    exit 1
   fi
fi

# if version starts with 'v', remove it
VERSION=${VERSION#v}

OS=$(uname -s)
ARCH=$(uname -m)

# change format (tar.gz or zip) based on ARCH
case ${ARCH} in
Windows) FORMAT=zip ;;
esac

# adjust archive name based on OS
case ${OS} in
Darwin) OS=macOS ;;
arm) OS=ARM ;;
arm64) OS=ARM64 ;;
dragonfly) OS=DragonFlyBSD ;;
i386) OS=32bit ;;
x86_64) OS=64bit ;;
esac

# adjust archive name based on ARCH
case ${ARCH} in
Darwin) ARCH=macOS ;;
arm) ARCH=ARM ;;
arm64) ARCH=ARM64 ;;
dragonfly) ARCH=DragonFlyBSD ;;
i386) ARCH=32bit ;;
x86_64) ARCH=64bit ;;
esac

NAME=${BINARY}_${VERSION}_${OS}-${ARCH}
TARBALL=${NAME}.${FORMAT}
TARBALL_URL=https://github.com/${OWNER}/${REPO}/releases/download/v${VERSION}/${TARBALL}
CHECKSUM=${REPO}_checksums.txt
CHECKSUM_URL=https://github.com/${OWNER}/${REPO}/releases/download/v${VERSION}/${CHECKSUM}

# Destructive operations start here
#
#
mktmpdir
download ${TMPDIR}/${TARBALL} ${TARBALL_URL}

# checksum goes here
if [ 1 -eq 1 ]; then
  download ${TMPDIR}/${CHECKSUM} ${CHECKSUM_URL}
  verify_checksum ${TMPDIR}/${TARBALL} ${TMPDIR}/${CHECKSUM}
fi

(cd ${TMPDIR} && untar ${TARBALL})
install -d ${BINDIR}
install ${TMPDIR}/${BINARY} ${BINDIR}/

